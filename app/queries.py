# AUTOGENERATED FROM:
#     'dbschema/queries/create_lecture.edgeql'
#     'dbschema/queries/delete_lectures.edgeql'
#     'dbschema/queries/finish_analysis.edgeql'
#     'dbschema/queries/get_lecture.edgeql'
#     'dbschema/queries/get_lectures.edgeql'
#     'dbschema/queries/set_lecture_status.edgeql'
# WITH:
#     $ edgedb-py --file app/queries.py


from __future__ import annotations
import dataclasses
import edgedb
import enum
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_validators__(cls):
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class CreateLectureResult(NoPydanticValidation):
    id: uuid.UUID
    object_name: str | None


@dataclasses.dataclass
class DeleteLecturesResult(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class GetLectureResult(NoPydanticValidation):
    id: uuid.UUID
    status: LectureStatus
    filename: str | None
    object_name: str | None
    text: str | None
    error: str | None
    timestamps: str | None
    terms: list[GetLectureResultTermsItem]
    summary: str | None


@dataclasses.dataclass
class GetLectureResultTermsItem(NoPydanticValidation):
    id: uuid.UUID
    term: str
    definition: str
    start_timestamp: float
    end_timestamp: float


@dataclasses.dataclass
class GetLecturesResult(NoPydanticValidation):
    id: uuid.UUID
    status: LectureStatus
    filename: str | None
    object_name: str | None
    text: str | None
    error: str | None


class LectureStatus(enum.Enum):
    CREATED = "Created"
    PROCESSING = "Processing"
    PROCESSED = "Processed"
    ERROR = "Error"


async def create_lecture(
    executor: edgedb.AsyncIOExecutor,
    *,
    filename: str,
    filename_suffix: str,
) -> CreateLectureResult:
    return await executor.query_single(
        """\
        with result := (insert Lecture {
            file := (insert File {
                filename := <str>$filename,
                filename_suffix := <str>$filename_suffix
            })
        })

        select result { id, object_name := .file.object_name }\
        """,
        filename=filename,
        filename_suffix=filename_suffix,
    )


async def delete_lectures(
    executor: edgedb.AsyncIOExecutor,
) -> list[DeleteLecturesResult]:
    return await executor.query(
        """\
        delete Lecture;\
        """,
    )


async def finish_analysis(
    executor: edgedb.AsyncIOExecutor,
    *,
    lecture_id: uuid.UUID,
    status: str | None,
    text: str | None,
    timestamps: str | None,
    error: str | None,
    terms: str | None,
) -> DeleteLecturesResult | None:
    return await executor.query_single(
        """\
        update Lecture
        filter .id = <uuid>$lecture_id
        set {
            status := <optional str>$status,
            text := <optional str>$text,
            timestamps := <optional json>$timestamps,
            error := <optional str>$error,
            terms := (
                with raw_data := <optional json>$terms,

                for term in json_array_unpack(raw_data) union (
                    insert Term {
                        term := <str>term['term'],
                        definition := <str>term['definition'],
                        start_timestamp := <float32>term['start_timestamp'],
                        end_timestamp := <float32>term['end_timestamp']
                    }
                )
            )
        }\
        """,
        lecture_id=lecture_id,
        status=status,
        text=text,
        timestamps=timestamps,
        error=error,
        terms=terms,
    )


async def get_lecture(
    executor: edgedb.AsyncIOExecutor,
    *,
    id: uuid.UUID,
) -> GetLectureResult | None:
    return await executor.query_single(
        """\
        select Lecture {
            id,
            status,
            filename := .file.filename,
            object_name := .file.object_name,
            text := .text,
            error := .error,
            timestamps := .timestamps,
            terms := .terms { term, definition, start_timestamp, end_timestamp },
            summary := .summary
        }
        filter .id = <uuid>$id
        limit 1\
        """,
        id=id,
    )


async def get_lectures(
    executor: edgedb.AsyncIOExecutor,
) -> list[GetLecturesResult]:
    return await executor.query(
        """\
        select Lecture {
            id,
            status,
            filename := .file.filename,
            object_name := <str>(.file.id),
            text := .text,
            error := .error
        }\
        """,
    )


async def set_lecture_status(
    executor: edgedb.AsyncIOExecutor,
    *,
    id: uuid.UUID,
    status: str,
) -> DeleteLecturesResult | None:
    return await executor.query_single(
        """\
        update Lecture
        filter .id = <uuid>$id
        set {
            status := <str>$status
        }\
        """,
        id=id,
        status=status,
    )
